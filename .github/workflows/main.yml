# This is a basic workflow to help you get started with Actions

name: Gihub Actions Maven Build Example

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
#  push:
#    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      JF_URL: ${{ secrets.JF_URL }}
      # JFrog Platform access token
      JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
      JFROG_BUILD_STATUS: PASS
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    # Setup JDK 11
    - name: Step 1 - Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: "11"
        distribution: "temurin"
    
    # setup JFrog CLI
    - name: Step 2 -  Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v2
        
    # Verify artifactory conenctivity
    - name: Step 3 - Ping RT
      run: |
        # Ping the server
        jf rt ping

    - name: Step5- Run Maven build
      env:
        SERVER_ID: ${{ secrets.MY_ARTIFACTORY_SERVER_ID }}
      run: |
        # Init JFrog CLI Maven config
        MVN_PATH=`which mvn` && export M2_HOME=`readlink -f $MVN_PATH | xargs dirname | xargs dirname`

        # Make sure artifactory servers for resolving 3rd party dependencies and for deploy are known to JFrog CLI
        jf mvnc --server-id-resolve=$SERVER_ID --server-id-deploy=$SERVER_ID --repo-resolve-releases=avi-maven-release-virtual --repo-resolve-snapshots=avi-maven-snapshot-virtual --repo-deploy-releases=avi-maven-release-virtual --repo-deploy-snapshots=avi-maven-snapshot-virtual                                                                                                                                                                                                                                                                                                 

        # Build the maven project ( see https://www.jfrog.com/confluence/display/JFROG/Setting+Up+CI+Integration)
        jf mvn clean install

    - name: Step6- Failure check
      run: |
        echo "JFROG_BUILD_STATUS=FAIL" >> $GITHUB_ENV
      if: failure()

      
    - name: Step7 - Publish to RT
      env: 
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run: |
        # Add env vars
        jf rt bce

        # Collect VCS details from git and add them to the build
        jfrog rt bag

        #Publish build-info
        jf rt bp
    - name: Step8 - Xray Scan
      run: |
        jf rt bs --fail=false

